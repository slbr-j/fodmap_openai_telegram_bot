from aiogram import Router, types
from aiogram.filters import Command
from keyboards import get_main_menu, get_product_categories_keyboard
import json

router = Router()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —ñ–∑ JSON
with open("data/products.json", "r", encoding="utf-8") as f:
    products = json.load(f)

# –ü–æ—à—É–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
def search_products_by_category(category):
    return [prod for prod in products if prod["–∫–∞—Ç–µ–≥–æ—Ä—ñ—è"] == category]

def search_product_by_name(name):
    for prod in products:
        if prod["–Ω–∞–∑–≤–∞"].lower() == name.lower():
            return prod
    return None

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É
def format_product_info(product):
    return (
        f"üî∏ {product['–Ω–∞–∑–≤–∞']}\n"
        f"{product['—Å—Ç–∞—Ç—É—Å']}\n\n"
        f"‚úÖ –ë–µ–∑–ø–µ—á–Ω–∞ –¥–æ–∑–∞: {product['–¥–æ–∑–∞_–±–µ–∑–ø–µ—á–Ω–∞']}\n"
        f"‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∞ –¥–æ–∑–∞: {product['–¥–æ–∑–∞_–Ω–µ–±–µ–∑–ø–µ—á–Ω–∞']}\n\n"
        f"FODMAP –ø—Ä–æ—Ñ—ñ–ª—å:\n"
        f"–§—Ä—É–∫—Ç–æ–∑–∞ {product['—Ñ—Ä—É–∫—Ç–æ–∑–∞']}\n"
        f"–õ–∞–∫—Ç–æ–∑–∞ {product['–ª–∞–∫—Ç–æ–∑–∞']}\n"
        f"–ú–∞–Ω—ñ—Ç–æ–ª {product['–º–∞–Ω—ñ—Ç–æ–ª']}\n"
        f"–°–æ—Ä–±—ñ—Ç–æ–ª {product['—Å–æ—Ä–±—ñ—Ç–æ–ª']}\n\n"
        f"üìå –ü–æ—Ä–∞–¥–∞ gastro–∫–æ—É—á–∞ –î–∞—Ä º—ó –í–æ–ª–æ–¥–∏–º–∏—Ä—ñ–≤–Ω–∏:\n"
        f"{product['–∫–æ–º–µ–Ω—Ç–∞—Ä']}\n\n"
        f"–õ—ñ–∫—É—é, –∞ –Ω–µ –ª—è–∫–∞—é ü´Ç"
    )

# –ö–æ–º–∞–Ω–¥–∏ /start —ñ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø FODMAP –∞—Å–∏—Å—Ç–µ–Ω—Ç üë©üèª‚Äç‚öïÔ∏è\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

@router.message(lambda msg: msg.text == "üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def cmd_menu(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –ö–ê–¢–ï–ì–û–†–Ü–á
@router.message(lambda msg: msg.text == "üçé –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")
async def cmd_categories(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:", reply_markup=get_product_categories_keyboard())

@router.message(lambda msg: msg.text in [
    "üçì –§—Ä—É–∫—Ç–∏", "ü•¶ –û–≤–æ—á—ñ", "ü•õ –ú–æ–ª–æ—á–Ω—ñ, –±–µ–∑–ª–∞–∫—Ç–æ–∑–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏",
    "üçπ –ù–∞–ø–æ—ó", "ü•ú –ë–æ–±–æ–≤—ñ, –≥–æ—Ä—ñ—Ö–∏, —Ç–æ—Ñ—É", "ü•© –ú'—è—Å–æ, —Ä–∏–±–∞, —è–π—Ü—è",
    "üßà –ñ–∏—Ä–∏ —Ç–∞ –º–∞—Å–ª–∞", "üç™ –°–Ω–µ–∫–∏, –±–∞—Ç–æ–Ω—á–∏–∫–∏, –ø–µ—á–∏–≤–æ", "üç∞ –ö–æ–Ω–¥–∏—Ç–µ—Ä—Å—å–∫—ñ –≤–∏—Ä–æ–±–∏, —Ü—É–∫–æ—Ä",
    "üßÇ –°–ø–µ—Ü—ñ—ó, —Å–æ—É—Å–∏", "üçû –•–ª—ñ–±–æ–±—É–ª–æ—á–Ω—ñ –≤–∏—Ä–æ–±–∏"
])
async def show_products_in_category(message: types.Message):
    category = message.text.replace("üçì ", "").replace("ü•¶ ", "").replace("ü•õ ", "").replace("üçπ ", "").replace("üçû ", "").replace("ü•ú ", "").replace("ü•© ", "").replace("üßà ", "").replace("üç™ ", "").replace("üç∞ ", "").replace("üßÇ ", "")
    category_products = search_products_by_category(category)

    if not category_products:
        await message.answer("–ù–µ–º–∞—î –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó üòï")
        return

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    product_names = [prod["–Ω–∞–∑–≤–∞"] for prod in category_products]
    products_list = "\n".join([f"üî∏ {name}" for name in product_names])

    await message.answer(f"–ü—Ä–æ–¥—É–∫—Ç–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category}:\n\n{products_list}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –¥–µ—Ç–∞–ª—ñ.")

# –ü–û–®–£–ö –ü–†–û–î–£–ö–¢–Ü–í
@router.message(lambda msg: msg.text == "ü•¶ –ü—Ä–æ–¥—É–∫—Ç–∏ (–ø–æ—à—É–∫)")
async def cmd_product_search(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è –ø–æ—à—É–∫—É üßê")

@router.message()
async def search_product_handler(message: types.Message):
    user_input = message.text.strip()

    product = search_product_by_name(user_input)

    if product:
        product_info = format_product_info(product)
        await message.answer(product_info)
    else:
        await message.answer("–ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É üòï\n\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –æ–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –º–µ–Ω—é.")

# –ó–ê–ü–ò–° –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Æ
@router.message(lambda msg: msg.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
async def cmd_consultation(message: types.Message):
    await message.answer(
        "–î–∞—Ä º—è –í–æ–ª–æ–¥–∏–º–∏—Ä—ñ–≤–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç—É—î –≤ –∫–ª—ñ–Ω—ñ—Ü—ñ Vita Medical.\n\n"
        "–ó–∞–ø–∏—Å —á–µ—Ä–µ–∑ —Å–∞–π—Ç: https://vitamedical.com.ua/\n"
        "–ê–±–æ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∫–ª—ñ–Ω—ñ–∫–∏: https://t.me/vitamedicalBot\n\n"
        "–ù–µ –∫–æ–Ω—Å—É–ª—å—Ç—É—é –≤ Direct! Google 24/7 ‚Äî go! üòâ"
    )
