from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import ChatActions
from keyboards import get_main_menu, get_product_categories_keyboard, PRODUCT_CATEGORIES
from assistants_api import ask_assistant

router = Router()

# –°—Ç–∞—Ä—Ç / –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø FODMAP –∞—Å–∏—Å—Ç–µ–Ω—Ç üë©üèª‚Äç‚öïÔ∏è\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

@router.message(lambda msg: msg.text == "üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def cmd_menu(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –ó–ê–ü–ò–° –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Æ
@router.message(lambda msg: msg.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
async def cmd_consultation(message: types.Message):
    await message.answer(
        "–î–∞—Ä º—è –í–æ–ª–æ–¥–∏–º–∏—Ä—ñ–≤–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç—É—î –≤ –∫–ª—ñ–Ω—ñ—Ü—ñ Vita Medical.\n\n"
        "–ó–∞–ø–∏—Å —á–µ—Ä–µ–∑ —Å–∞–π—Ç: https://vitamedical.com.ua/\n"
        "–ê–±–æ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∫–ª—ñ–Ω—ñ–∫–∏: https://t.me/vitamedicalBot\n\n"
        "–ù–µ –∫–æ–Ω—Å—É–ª—å—Ç—É—é –≤ Direct! Google 24/7 ‚Äî go! üòâ"
    )

# –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
async def cmd_back_to_main_menu(message: types.Message):
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é üëá",
        reply_markup=get_main_menu()
    )

# –ö–ê–¢–ï–ì–û–†–Ü–á
@router.message(lambda msg: msg.text == "üçé –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")
async def cmd_categories(message: types.Message):
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ üëá",
        reply_markup=get_product_categories_keyboard()
    )

# –û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏
@router.message(lambda msg: msg.text in PRODUCT_CATEGORIES.keys())
async def ask_category(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ PRODUCT_CATEGORIES —Å–ª–æ–≤–Ω–∏–∫–∞
    category_key = PRODUCT_CATEGORIES[message.text]

    query = f"–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category_key}' –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ FODMAP."

    response = await ask_assistant(query)

    await message.answer(response)

# –ü–û–®–£–ö –ü–†–û–î–£–ö–¢–£
@router.message(lambda msg: msg.text == "ü•¶ –ü—Ä–æ–¥—É–∫—Ç–∏ (–ø–æ—à—É–∫)")
async def cmd_product_search(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è –ø–æ—à—É–∫—É üßê")

@router.message()
async def ask_product_info(message: types.Message):
    user_input = message.text.strip()
    msg = await message.reply("üëÄ –®—É–∫–∞—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...")
    # –ü–æ–∫–∞–∑—É—î–º–æ —â–æ "–¥—Ä—É–∫—É—î"
    await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatActions.TYPING)

    # –ì–æ—Ç—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
    query = f"–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç '{user_input}' –∑–≥—ñ–¥–Ω–æ –¥—ñ—î—Ç–∏ Low-FODMAP. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–∞–Ω—ñ –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É."

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
    response = await ask_assistant(query)
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await msg.delete()

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.answer(response)
