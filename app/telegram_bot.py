from aiogram import Router, types
from aiogram.filters import Command
from aiogram.enums import ChatAction
import re
from keyboards import (
    get_main_menu,
    get_product_categories_keyboard,
    get_products_keyboard,
    get_fodmap_info_keyboard,
)
from data_loader import (
    CATEGORIES,
    CATEGORY_NAME_TO_ID,
    CATEGORY_ID_TO_NAME,
    PRODUCTS,
    get_products_by_category,
)
from assistants_api import ask_assistant
from keyboard_labels import (
    BTN_CATEGORIES,
    BTN_LOW_HIGH_FODMAP,
    BTN_PRODUCT_SEARCH,
    BTN_FODMAP_INFO,
    BTN_BOOK_CONSULTATION,
    BTN_BACK_TO_MAIN_MENU,
    BTN_BACK_TO_CATEGORIES,
    BTN_WHAT_IS_FODMAP,
    BTN_DIET_STAGES,
    BTN_SYMPTOMS_CAUSE,
)
from rapidfuzz import process, fuzz

router = Router()

BOOKING_KEYWORDS = [
    r"\b–∑–∞–ø–∏—Å(–∞—Ç–∏—Å—å|–∞—Ç–∏—Å—è)?\b",
    r"\b–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü(—ñ—è|—ñ—ó|—ñ—é|—ñ—è–º–∏)?\b",
    r"\b–ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—É(—î|–≤–∞—Ç–∏—Å—å|–≤–∞—Ç–∏—Å—è)?\b",
    r"\bappointment\b",
    r"\bbook\b",
    r"\bschedule\b",
]


@router.message(
    lambda msg: any(
        re.search(pattern, msg.text.lower()) for pattern in BOOKING_KEYWORDS
    )
)
async def auto_consultation(message: types.Message):
    await message.answer(
        "–î–∞—Ä º—è –í–æ–ª–æ–¥–∏–º–∏—Ä—ñ–≤–Ω–∞ –ü–æ–º–∞–∑–∞–Ω –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π —É Direct –∞–±–æ –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ.\n\n"
        "–í—Å—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –ø—Ä–∏–∑–Ω–∞—á–∞—é—Ç—å—Å—è —á–µ—Ä–µ–∑ –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –∫–∞–Ω–∞–ª–∏ –∫–ª—ñ–Ω—ñ–∫–∏ Vita Medical.\n\n"
        "‚û°Ô∏è <a href='https://vitamedical.com.ua/'>vitamedical.com.ua</a>\n"
        "‚û°Ô∏è <a href='https://t.me/vitamedicalBot'>t.me/vitamedicalBot</a>\n\n"
        "‚ùóÔ∏è –ù–µ —Å–æ—Ä–æ–º—Ç–µ—Å—å –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏—Å—å, –≤–∞—à–µ –∑–¥–æ—Ä–æ–≤‚Äô—è –≤–∞–∂–ª–∏–≤–µ!\n\n"
        "üëâ <b>–õ—ñ–∫—É—é, –∞ –Ω–µ –ª—è–∫–∞—é ü´Ç</b>"
    )


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.bot.send_chat_action(
        chat_id=message.chat.id, action=ChatAction.TYPING
    )
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! \n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:",
        reply_markup=get_main_menu(),
    )


@router.message(lambda msg: msg.text == "üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def cmd_menu(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", reply_markup=get_main_menu())


@router.message(lambda msg: msg.text == BTN_BOOK_CONSULTATION)
async def cmd_consultation(message: types.Message):
    await message.bot.send_chat_action(
        chat_id=message.chat.id, action=ChatAction.TYPING
    )
    await message.answer(
        "–î–∞—Ä º—è –í–æ–ª–æ–¥–∏–º–∏—Ä—ñ–≤–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç—É—î –≤ –∫–ª—ñ–Ω—ñ—Ü—ñ Vita Medical.\n\n"
        "–ó–∞–ø–∏—Å —á–µ—Ä–µ–∑ —Å–∞–π—Ç: <a href='https://vitamedical.com.ua/'>vitamedical.com.ua</a>\n"
        "–ê–±–æ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∫–ª—ñ–Ω—ñ–∫–∏: <a href='https://t.me/vitamedicalBot'>t.me/vitamedicalBot</a>\n\n"
        "–ù–µ –∫–æ–Ω—Å—É–ª—å—Ç—É—é –≤ Direct! Google 24/7 ‚Äî go! üòâ"
    )


@router.message(Command("fodmap_products"))
async def cmd_fodmap_products(message: types.Message):
    await show_low_high_fodmap_products(message)


@router.message(lambda msg: msg.text == BTN_LOW_HIGH_FODMAP)
async def show_low_high_fodmap_products(message: types.Message):
    low_fodmap_products = [
        p["name"] for p in PRODUCTS if p.get("overall_fodmap_level") == "low"
    ]
    high_fodmap_products = [
        p["name"] for p in PRODUCTS if p.get("overall_fodmap_level") == "high"
    ]

    low_list = "\n".join([f"‚úÖ {name}" for name in low_fodmap_products])
    high_list = "\n".join([f"üö´ {name}" for name in high_fodmap_products])

    text = (
        "<b>–ü—Ä–æ–¥—É–∫—Ç–∏ –∑ –Ω–∏–∑—å–∫–∏–º –≤–º—ñ—Å—Ç–æ–º FODMAP:</b>\n\n"
        f"{low_list}\n\n"
        "<b>–ü—Ä–æ–¥—É–∫—Ç–∏ –∑ –≤–∏—Å–æ–∫–∏–º –≤–º—ñ—Å—Ç–æ–º FODMAP:</b>\n\n"
        f"{high_list}\n\n"
        "‚ùóÔ∏è –ü–∞–º º—è—Ç–∞–π—Ç–µ, FODMAP —Ä–µ—á–æ–≤–∏–Ω–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –º–æ–∂—É—Ç—å –Ω–∞–∫–æ–ø–∏—á—É–≤–∞—Ç–∏—Å—å.\n\n"
        "üëâ <b>–õ—ñ–∫—É—é, –∞ –Ω–µ –ª—è–∫–∞—é ü´Ç</b>"
    )

    await message.answer(text)


def find_product_by_name(name: str):
    return next((p for p in PRODUCTS if p["name"].lower() == name.lower()), None)


def find_product_by_name_fuzzy(name: str, threshold: int = 80):
    product_names = [p["name"] for p in PRODUCTS]
    match = process.extractOne(name, product_names, scorer=fuzz.WRatio)

    if match and match[1] >= threshold:
        return next((p for p in PRODUCTS if p["name"] == match[0]), None)
    return None


def format_fodmaps(fodmaps: dict) -> str:
    return (
        f"–§—Ä—É–∫—Ç–æ–∑–∞: {fodmaps.get('fructose', '‚ùì')}  "
        f"–õ–∞–∫—Ç–æ–∑–∞: {fodmaps.get('lactose', '‚ùì')}\n"
        f"–ú–∞–Ω—ñ—Ç–æ–ª: {fodmaps.get('mannitol', '‚ùì')}  "
        f"–°–æ—Ä–±—ñ—Ç–æ–ª: {fodmaps.get('sorbitol', '‚ùì')}\n"
        f"–ì–û–°: {fodmaps.get('gos', '‚ùì')}  "
        f"–§—Ä—É–∫—Ç–∞–Ω–∏: {fodmaps.get('fructans', '‚ùì')}"
    )


@router.message()
async def ask_product_info(message: types.Message):
    user_input = message.text.strip()

    product = find_product_by_name(user_input)

    if not product:
        product = find_product_by_name_fuzzy(user_input)

    if product:
        msg = await message.reply("üëÄ –ü—ñ—à–æ–≤ —à—É–∫–∞—Ç–∏...")

        await message.bot.send_chat_action(
            chat_id=message.chat.id, action=ChatAction.TYPING
        )

        low_dose = product["doses"]["low"]
        moderate_dose = product["doses"]["moderate"]
        high_dose = product["doses"]["high"]

        text = (
            f"üìù <b>{product['name']}</b>\n"
            f"–°—Ç–∞—Ç—É—Å: {product['status']}\n\n"
            f"üü¢ <b>–ë–µ–∑–ø–µ—á–Ω–∞ –¥–æ–∑–∞</b>: {low_dose['amount']}\n"
            f"{format_fodmaps(low_dose['fodmaps'])}\n\n"
            f"üü° <b>–ü–æ–º—ñ—Ä–Ω–∞ –¥–æ–∑–∞</b>: {moderate_dose['amount']}\n"
            f"{format_fodmaps(moderate_dose['fodmaps'])}\n\n"
            f"üî¥ <b>–ù–µ–±–µ–∑–ø–µ—á–Ω–∞ –¥–æ–∑–∞</b>: {high_dose['amount']}\n"
            f"{format_fodmaps(high_dose['fodmaps'])}\n\n"
            f"{product.get('comment', '')}\n\n"
            f"‚ùóÔ∏è –ü–∞–º º—è—Ç–∞–π—Ç–µ, —â–æ FODMAP —Ä–µ—á–æ–≤–∏–Ω–∏ –º–æ–∂—É—Ç—å –Ω–∞–∫–æ–ø–∏—á—É–≤–∞—Ç–∏—Å—å –ø—Ä–∏ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—ñ–≤.\n\n"
            f"üëâ –õ—ñ–∫—É—é, –∞ –Ω–µ –ª—è–∫–∞—é ü´Ç"
        )

        await msg.delete()
        return await message.answer(text)

    msg = await message.reply("üëÄ –ü—ñ—à–æ–≤ —à—É–∫–∞—Ç–∏...")
    await message.bot.send_chat_action(
        chat_id=message.chat.id, action=ChatAction.TYPING
    )

    product_names = [p["name"] for p in PRODUCTS]
    context = (
        "–£ –º–µ–Ω–µ —î —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –Ω–∞ –¥—ñ—î—Ç—ñ Low-FODMAP: "
        + ", ".join(product_names)
        + ". "
        "–Ø–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç—É –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É, –¥–∞–π –∑–∞–≥–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–≥—ñ–¥–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É Low-FODMAP."
    )

    query = (
        f"{context}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—Ç–∞—î –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç '{user_input}'. "
        "–í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø—Ä–∞–≤–∏–ª –¥—ñ—î—Ç–∏ Low-FODMAP, "
        "–Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª –î–∞—Ä º—ó –í–æ–ª–æ–¥–∏–º–∏—Ä—ñ–≤–Ω–∏."
    )

    response = await ask_assistant(query)

    await msg.delete()
    await message.answer(response)
