from aiogram import Router, types
from aiogram.filters import Command
from aiogram.enums import ChatAction
from keyboards import get_main_menu, get_product_categories_keyboard, get_products_keyboard–± get_fodmap_info_keyboard
from data_loader import CATEGORIES, CATEGORY_NAME_TO_ID, CATEGORY_ID_TO_NAME, PRODUCTS, get_products_by_category
from assistants_api import ask_assistant
from keyboard_labels import (
    BTN_CATEGORIES,
    BTN_PRODUCT_SEARCH,
    BTN_FODMAP_INFO,
    BTN_BOOK_CONSULTATION,
    BTN_BACK_TO_MAIN_MENU,
    BTN_BACK_TO_CATEGORIES,
    BTN_WHAT_IS_FODMAP,
    BTN_DIET_STAGES,
    BTN_SYMPTOMS_CAUSE
)

router = Router()

# –°—Ç–∞—Ä—Ç / –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    # –ü–æ–∫–∞–∑—É—î–º–æ —â–æ "–¥—Ä—É–∫—É—î"
    await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø FODMAP –∞—Å–∏—Å—Ç–µ–Ω—Ç üë©üèª‚Äç‚öïÔ∏è\n\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

@router.message(lambda msg: msg.text == "üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def cmd_menu(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –ó–ê–ü–ò–° –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Æ
@router.message(lambda msg: msg.text == BTN_BOOK_CONSULTATION)
async def cmd_consultation(message: types.Message):
    # –ü–æ–∫–∞–∑—É—î–º–æ —â–æ "–¥—Ä—É–∫—É—î"
    await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    await message.answer(
        "–î–∞—Ä º—è –í–æ–ª–æ–¥–∏–º–∏—Ä—ñ–≤–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç—É—î –≤ –∫–ª—ñ–Ω—ñ—Ü—ñ Vita Medical.\n\n"
        "–ó–∞–ø–∏—Å —á–µ—Ä–µ–∑ —Å–∞–π—Ç: https://vitamedical.com.ua/\n"
        "–ê–±–æ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∫–ª—ñ–Ω—ñ–∫–∏: https://t.me/vitamedicalBot\n\n"
        "–ù–µ –∫–æ–Ω—Å—É–ª—å—Ç—É—é –≤ Direct! Google 24/7 ‚Äî go! üòâ"
    )
# ABOUT FODMAP
@router.message(lambda msg: msg.text == BTN_FODMAP_INFO)
async def cmd_fodmap_info(message: types.Message):
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å üëá",
        reply_markup=get_fodmap_info_keyboard()
    )

@router.message(lambda msg: msg.text == BTN_WHAT_IS_FODMAP)
async def explain_fodmap(message: types.Message):
    await message.answer(
        "ü•¶ **–©–æ —Ç–∞–∫–µ FODMAP?**\n\n"
        "FODMAP ‚Äî —Ü–µ –≥—Ä—É–ø–∞ –≤—É–≥–ª–µ–≤–æ–¥—ñ–≤, —è–∫—ñ –ø–æ–≥–∞–Ω–æ –∑–∞—Å–≤–æ—é—é—Ç—å—Å—è —É —Ç–æ–Ω–∫–æ–º—É –∫–∏—à–µ—á–Ω–∏–∫—É.\n"
        "–í–æ–Ω–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑–¥—É—Ç—Ç—è –∂–∏–≤–æ—Ç–∞, –±—ñ–ª—å, –¥—ñ–∞—Ä–µ—é —Ç–∞ –≥–∞–∑–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è.\n\n"
        "**–î–æ FODMAP –Ω–∞–ª–µ–∂–∞—Ç—å:**\n"
        "- **–§—Ä—É–∫—Ç–æ–∑–∞** (üçØ –º–µ–¥, —Ñ—Ä—É–∫—Ç–∏)\n"
        "- **–õ–∞–∫—Ç–æ–∑–∞** (ü•õ –º–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏)\n"
        "- **–ü–æ–ª—ñ–æ–ª–∏** (üç¨ —Å–æ—Ä–±—ñ—Ç–æ–ª, –º–∞–Ω—ñ—Ç–æ–ª)\n"
        "- **–§—Ä—É–∫—Ç–∞–Ω–∏ —Ç–∞ –ì–ó–ö** (üßÑ —Ü–∏–±—É–ª—è, —á–∞—Å–Ω–∏–∫, –±–æ–±–æ–≤—ñ)\n\n"
        "üëâ **–õ—ñ–∫—É—é, –∞ –Ω–µ –ª—è–∫–∞—é ü´Ç**"
    )

@router.message(lambda msg: msg.text == BTN_DIET_STAGES)
async def explain_diet_steps(message: types.Message):
    await message.answer(
        "üìã **–ï—Ç–∞–ø–∏ –¥—ñ—î—Ç–∏ Low-FODMAP**\n\n"
        "1Ô∏è‚É£ **–ï–ª—ñ–º—ñ–Ω–∞—Ü—ñ—è (2-6 —Ç–∏–∂–Ω—ñ–≤):**\n"
        "–í–∏–∫–ª—é—á–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –≤–∏—Å–æ–∫–∏–º –≤–º—ñ—Å—Ç–æ–º FODMAP.\n\n"
        "2Ô∏è‚É£ **–†–µ—ñ–Ω—Ç—Ä–æ–¥—É–∫—Ü—ñ—è (6-8 —Ç–∏–∂–Ω—ñ–≤):**\n"
        "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –ø–æ —á–µ—Ä–∑—ñ, –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏ —Ä–µ–∞–∫—Ü—ñ—é –æ—Ä–≥–∞–Ω—ñ–∑–º—É.\n\n"
        "3Ô∏è‚É£ **–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è:**\n"
        "–§–æ—Ä–º—É—î–º–æ —Å–≤—ñ–π —Ä–∞—Ü—ñ–æ–Ω, —É–Ω–∏–∫–∞—é—á–∏ –ª–∏—à–µ –ø—Ä–æ–±–ª–µ–º–Ω—ñ FODMAP.\n\n"
        "üëâ **–õ—ñ–∫—É—é, –∞ –Ω–µ –ª—è–∫–∞—é ü´Ç**"
    )

@router.message(lambda msg: msg.text == BTN_SYMPTOMS_CAUSE)
async def explain_symptoms(message: types.Message):
    await message.answer(
        "üßê **–ß–æ–º—É –≤–∏–Ω–∏–∫–∞—é—Ç—å —Å–∏–º–ø—Ç–æ–º–∏?**\n\n"
        "FODMAP –ø—Ä–∏—Ç—è–≥—É—é—Ç—å –≤–æ–¥—É –≤ –∫–∏—à–∫—ñ–≤–Ω–∏–∫ üíß —Ç–∞ —Ñ–µ—Ä–º–µ–Ω—Ç—É—é—Ç—å—Å—è –±–∞–∫—Ç–µ—Ä—ñ—è–º–∏ ü¶†, "
        "—â–æ —Å–ø—Ä–∏—á–∏–Ω—è—î:\n"
        "- –∑–¥—É—Ç—Ç—è üéà\n"
        "- –±—ñ–ª—å ü•¥\n"
        "- –¥—ñ–∞—Ä–µ—é üöΩ\n\n"
        "–û—Å–æ–±–ª–∏–≤–æ —Ü–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –ª—é–¥–µ–π —ñ–∑ —Å–∏–Ω–¥—Ä–æ–º–æ–º –ø–æ–¥—Ä–∞–∑–Ω–µ–Ω–æ–≥–æ –∫–∏—à–µ—á–Ω–∏–∫–∞ (IBS), "
        "–±–æ —ó—Ö –∫–∏—à–∫—ñ–≤–Ω–∏–∫ –±—ñ–ª—å—à —á—É—Ç–ª–∏–≤–∏–π.\n\n"
        "üëâ **–õ—ñ–∫—É—é, –∞ –Ω–µ –ª—è–∫–∞—é ü´Ç**"
    )


# –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(lambda msg: msg.text == BTN_BACK_TO_MAIN_MENU)
async def cmd_back_to_main_menu(message: types.Message):
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é üëá",
        reply_markup=get_main_menu()
    )

# –ö–ê–¢–ï–ì–û–†–Ü–á
@router.message(lambda msg: msg.text == BTN_CATEGORIES)
async def cmd_categories(message: types.Message):
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ üëá",
        reply_markup=get_product_categories_keyboard()
    )

# –û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏
@router.message(lambda msg: msg.text in CATEGORY_NAME_TO_ID.keys())
async def ask_category(message: types.Message):
    category_id = CATEGORY_NAME_TO_ID[message.text]
    
    # –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä, —â–æ –±–æ—Ç "–¥—Ä—É–∫—É—î"
    await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    products_keyboard = get_products_keyboard(category_id)

    if products_keyboard:
        await message.answer(
            text=f"–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {message.text}:",
            reply_markup=products_keyboard
        )
    else:
        await message.answer("–ù–∞–∂–∞–ª—å, –ø—Ä–æ–¥—É–∫—Ç–∏ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")

@router.message(lambda msg: msg.text == BTN_BACK_TO_CATEGORIES)
async def back_to_categories(message: types.Message):
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ üëá",
        reply_markup=get_product_categories_keyboard()
    )

def find_product_by_name(name: str):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–¥—É–∫—Ç –∑ PRODUCTS –∑–∞ –π–æ–≥–æ name.
    –ü–æ—à—É–∫ –Ω–µ—á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É.
    """
    return next((p for p in PRODUCTS if p["name"].lower() == name.lower()), None)

def format_fodmaps(fodmaps: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î FODMAP –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫—Ä–∞—Å–∏–≤–∏–π —Ä—è–¥–æ–∫.
    """
    return (
        f"–§—Ä—É–∫—Ç–æ–∑–∞: {fodmaps.get('fructose', '‚ùì')}  "
        f"–õ–∞–∫—Ç–æ–∑–∞: {fodmaps.get('lactose', '‚ùì')}\n"
        f"–ú–∞–Ω—ñ—Ç–æ–ª: {fodmaps.get('mannitol', '‚ùì')}  "
        f"–°–æ—Ä–±—ñ—Ç–æ–ª: {fodmaps.get('sorbitol', '‚ùì')}\n"
        f"–ì–û–°: {fodmaps.get('gos', '‚ùì')}  "
        f"–§—Ä—É–∫—Ç–∞–Ω–∏: {fodmaps.get('fructans', '‚ùì')}"
    )


@router.message(lambda msg: msg.text in [product["name"] for product in PRODUCTS])
async def show_product_info(message: types.Message):
    # –ü–æ—à—É–∫ –ø—Ä–æ–¥—É–∫—Ç—É –∑–∞ —ñ–º'—è–º
    product = next((p for p in PRODUCTS if p["name"] == message.text), None)

    if not product:
        await message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢")
        return

    msg = await message.reply("üëÄ –ü—ñ—à–æ–≤ —à—É–∫–∞—Ç–∏...")

    await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

    # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –¥–æ–∑
    low_dose = product['doses']['low']
    moderate_dose = product['doses']['moderate']
    high_dose = product['doses']['high']

    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç
    text = (
        f"üìù <b>{product['name']}</b>\n"
        f"–°—Ç–∞—Ç—É—Å: {product['status']}\n\n"

        f"üü¢ <b>–ë–µ–∑–ø–µ—á–Ω–∞ –¥–æ–∑–∞</b>: {low_dose['amount']}\n"
        f"{format_fodmaps(low_dose['fodmaps'])}\n\n"

        f"üü° <b>–ü–æ–º—ñ—Ä–Ω–∞ –¥–æ–∑–∞</b>: {moderate_dose['amount']}\n"
        f"{format_fodmaps(moderate_dose['fodmaps'])}\n\n"

        f"üî¥ <b>–ù–µ–±–µ–∑–ø–µ—á–Ω–∞ –¥–æ–∑–∞</b>: {high_dose['amount']}\n"
        f"{format_fodmaps(high_dose['fodmaps'])}\n\n"

        f"{product.get('comment', '')}\n\n"
        f"‚ùóÔ∏è –ü–∞–º º—è—Ç–∞–π—Ç–µ, —â–æ FODMAP —Ä–µ—á–æ–≤–∏–Ω–∏ –º–æ–∂—É—Ç—å –Ω–∞–∫–æ–ø–∏—á—É–≤–∞—Ç–∏—Å—å –ø—Ä–∏ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—ñ–≤.\n\n"
        f"üëâ –õ—ñ–∫—É—é, –∞ –Ω–µ –ª—è–∫–∞—é ü´Ç"
    )

    await msg.delete()

    await message.answer(text, parse_mode="HTML")


# –ü–û–®–£–ö –ü–†–û–î–£–ö–¢–£
@router.message(lambda msg: msg.text == BTN_PRODUCT_SEARCH)
async def cmd_product_search(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è –ø–æ—à—É–∫—É üßê")

@router.message()
async def ask_product_info(message: types.Message):
    user_input = message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø—Ä–æ–¥—É–∫—Ç —É PRODUCTS
    product = find_product_by_name(user_input)
    if product:
        return await show_product_info(message, product)

    # –Ø–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, –π–¥–µ–º–æ –¥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    msg = await message.reply("üëÄ –ü—ñ—à–æ–≤ —à—É–∫–∞—Ç–∏...")

    await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

    query = f"–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç '{user_input}' –∑–≥—ñ–¥–Ω–æ –¥—ñ—î—Ç–∏ Low-FODMAP. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–∞–Ω—ñ –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É."

    response = await ask_assistant(query)
    
    await msg.delete()
    await message.answer(response)
